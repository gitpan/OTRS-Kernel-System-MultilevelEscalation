<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>MultilevelEscalation</Name>
    <Version>1.0.1</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">The OTRS::AdminESCL and OTRS::Escalation Core package.</Description>
    <Description Lang="de">Das OTRS::AdminESCL and OTRS::Escalation Core Paket.</Description>
    <Framework>3.x.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the OTRS package AdminESCL.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
	&lt;strong&gt;REQUIRED OTRS PACKAGES 3.x.x&lt;/strong&gt;
        &lt;br/&gt;
        Make sure your database accepts packages over 5 MB in size. A MySQL database for example accepts packages up to 1 MB by default. In this case, the value for max_allowed_packet must be increased. The recommended maximum size accepted is 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket AdminESCL zu installieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;BENÖTIGTE OTRS-PAKETE 3.x.x&lt;/strong&gt;
        &lt;br/&gt;
        &lt;strong&gt;ACHTUNG&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Vergewissern Sie sich, dass ihre Datenbank Pakete mit einer Größe von mehr als 5 MB akzeptiert. Eine MySQL Datenbank akzeptiert beispielsweise standardmäßig Pakete mit einer Größe von maximal 1 MB. In diesem Fall muss der Wert für max_allowed_packet erhöht werden. Empfohlen werden 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Información de Instalación" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted está apunto de instalar el modulo AdminESCL de OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES REQUERIDOS 3.x.x&lt;/strong&gt;
        &lt;br/&gt;
        &lt;strong&gt;ATENCIÓN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Por favor asegúrese que su base de datos acepte paquetes de mas de 5 MB de tamaño. Por ejemplo una base de datos de MySQL acepta paquetes de mas de 1 MB predefinido. En este caso la configuración max_allowed_packet debe ser incrementada. El tamaño recomendado es 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="en" Title="Installation Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;NOTICE&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        In order to grant users access to the escalation mail, you need to add user's role to Escalation Matrix.&lt;br/&gt;
	A new Agent Notifications Item 'Agent::EscalationMatrix' will be added to manage the template for Notification mail.&lt;br/&gt;
	One need to scheduled a job for the escalation.pl under the path /&lt;OTRS_CONFIG_ScriptAlias&gt;bin.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;HINWEIS&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        In order to grant users access to the escalation mail, you need to add user's role to Escalation Matrix.&lt;br/&gt;
	A new Agent Notifications Item 'Agent::EscalationMatrix' will be added to manage the template for Notification mail.&lt;br/&gt;
	One need to scheduled a job for the escalation.pl under the path /&lt;OTRS_CONFIG_ScriptAlias&gt;bin.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Información de Instalación" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;AVISO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        In order to grant users access to the escalation mail, you need to add user's role to Escalation Matrix.&lt;br/&gt;
	A new Agent Notifications Item 'Agent::EscalationMatrix' will be added to manage the template for Notification mail.&lt;br/&gt;
	One need to scheduled a job for the escalation.pl under the path /&lt;OTRS_CONFIG_ScriptAlias&gt;bin.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        If you uninstall this package, all database tables that were created during installation will be DELETED.
        All data from these tables will be irrevocably lost!
        &lt;br/&gt;
        &lt;br/&gt;
        The block 'Ticket - Escalation Matrix' that was created during package installation will be removed.
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="de" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ACHTUNG&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Bei der Deinstallation werden die von diesem Paket angelegten Datenbank-Tabellen gelöscht.
        Alle darin enthaltenen Daten gehen unwiderruflich verloren!
        &lt;br/&gt;
        &lt;br/&gt;
        Die von diesem Paket angelegte Gruppe 'Ticket - Escalation Matrix' wird deaktiviert.
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="es" Title="Información de Desinstalación" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATENCIÓN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Si usted desinstala este paquete, todas las tablas de la base de datos creadas durante la instalación serán borradas.
        ¡Todos los datos de esas tablas serán irrevocablemente perdidos!.
        &lt;br/&gt;
        &lt;br/&gt;
        El blok 'Ticket - Escalation Matrix' que fue creado durante la instalación será desactivado.
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to upgrade the OTRS package AdminESCL.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;/strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
	&lt;strong&gt;REQUIRED OTRS PACKAGES&lt;/strong&gt;
        &lt;br/&gt;
	Make sure your database accepts packages over 5 MB in size. A MySQL database for example accepts packages up to 1 MB by default. In this case, the value for max_allowed_packet must be increased. The recommended maximum size accepted is 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="de" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket AdminESCL zu aktualisieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;ACHTUNG&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
	&lt;strong&gt;BENÖTIGTE OTRS-PAKETE&lt;/strong&gt;
        &lt;br/&gt;
	&lt;br/&gt;
        Vergewissern Sie sich, dass ihre Datenbank Pakete mit einer Größe von mehr als 5 MB akzeptiert. Eine MySQL Datenbank akzeptiert beispielsweise standardmäßig Pakete mit einer Größe von maximal 1 MB. In diesem Fall muss der Wert für max_allowed_packet erhöht werden. Empfohlen werden 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="es" Title="Información de Actualización" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted está apunto de instalar el modulo AdminESCL de OTRS.&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;
	&lt;strong&gt;ATENCIÓN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES REQUERIDOS&lt;/strong&gt;
        &lt;br/&gt;
        Por favor asegúrese que su base de datos acepte paquetes de mas de 5 MB de tamaño. Por ejemplo una base de datos de MySQL acepta paquetes de mas de 1 MB predefinido. En este caso la configuración max_allowed_packet debe ser incrementada. El tamaño recomendado es 20 MB.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Thank You&lt;br/&gt;
	&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <PackageRequired Version="3.x.x">ITSMCore</PackageRequired>
    <CodeInstall Type="post">
     
        # define function name
        my $FunctionName = 'CodeInstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
		
		if ($CodeObject) {
				
			# start methode	
			my $QueryCheckPrimKey = $Self-&gt;{DBObject}-&gt;Do(
                            SQL =&gt; 'ALTER TABLE escalation ADD PRIMARY KEY(sla_id,notify_type,level)',
                        );
			if ($QueryCheckPrimKey) {
				if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
					$Self-&gt;{LogObject}-&gt;Log(
					     Priority =&gt; 'error',
					     Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
					);
				}
			}
			
			
			
			my $QueryCheckNotifications = 'SELECT id FROM notifications WHERE notification_type LIKE &quot;Agent::EscalationMatrix&quot;';
			my $QueryDel = 'DELETE FROM notifications WHERE notification_type LIKE &quot;Agent::EscalationMatrix&quot;';
			$Self-&gt;{DBObject}-&gt;Prepare( SQL =&gt; $QueryCheckNotifications );
			my @NotificationsFields = $Self-&gt;{DBObject}-&gt;FetchrowArray();
			if($NotificationsFields[0]) {
				my $QueryDelete = $Self-&gt;{DBObject}-&gt;Do(
				    SQL =&gt; $QueryDel,
				);
			}
			
			
			
			my $Type = &quot;Agent::EscalationMatrix&quot;;
			my $Charset = &quot;utf-8&quot;;
			my $Lang = &quot;en&quot;;
			my $Sub = &quot;Ticket Escalation Before &lt;OTRS_CUSTOMER_EMAIL[30]&gt;! (&lt;OTRS_CUSTOMER_SUBJECT[24]&gt;)&quot;;
			my $CreateTime = $Self-&gt;{TimeObject}-&gt;SystemTime2TimeStamp( SystemTime =&gt; $Self-&gt;{TimeObject}-&gt;SystemTime());
			my $Txt = &quot;Hi &lt;OTRS_UserFirstname&gt; &lt;OTRS_UserLastname&gt;,   
				
				Ticket [&lt;OTRS_TICKET_TicketNumber&gt;] has breached: &lt;OTRS_CUSTOMER_EMAIL[30]&gt;.    
				
				Ticket Owner             :  &lt;OTRS_OWNER_UserFirstname&gt; &lt;OTRS_OWNER_UserLastname&gt;.    
				
				Ticket Queue            :  &lt;OTRS_CUSTOMER_QUEUE&gt;.    
				
				Ticket Priority            :  &lt;OTRS_TICKET_Priority&gt;.    
				
				Ticket SLA                 :  &lt;OTRS_TICKET_SLA&gt;.      
				
				Please have a look:
				
				&lt;OTRS_CONFIG_HttpType&gt;://&lt;OTRS_CONFIG_FQDN&gt;/&lt;OTRS_CONFIG_ScriptAlias&gt;index.pl?Action=AgentZoom;TicketID=&lt;OTRS_TICKET_TicketID&gt;      
				
				
				Regards  
				OTRS Admin&quot;;
			
			
			
			my $QueryNotificationsAlter_en = $Self-&gt;{DBObject}-&gt;Do(
			SQL =&gt; &quot;INSERT INTO notifications
			(notification_type, notification_charset, notification_language, subject, text, content_type, create_by, create_time, change_by, change_time)
			VALUES (?, ?, ?, ?, ?, 'text/plain', 1, ?, 1, ?)&quot;,
			Bind =&gt; [\$Type, \$Charset, \$Lang, \$Sub, \$Txt, \$CreateTime, \$CreateTime,],
			);
				
			if (!$QueryNotificationsAlter_en) {
				
				$Self-&gt;{LogObject}-&gt;Log(
				    Priority =&gt; 'error',
				    Message  =&gt; &quot;Could not insert value for Notifications for 'en' on $CodeModule.pm.&quot;
				);
				
			}
			
			my $Lang_de = &quot;de&quot;;
			my $Sub_de = &quot;Ticket Eskalation Before &lt;OTRS_CUSTOMER_EMAIL[30]&gt;! (&lt;OTRS_CUSTOMER_SUBJECT[24]&gt;)&quot;;
			my $Txt_de = &quot;Hallo &lt;OTRS_UserFirstname&gt; &lt;OTRS_UserLastname&gt;,
				
				das Ticket [&lt;OTRS_TICKET_TicketNumber&gt;] ist eskaliert (has breached in english): &lt;OTRS_CUSTOMER_EMAIL[30]&gt;.    
				
				Ticket Owner             :  &lt;OTRS_OWNER_UserFirstname&gt; &lt;OTRS_OWNER_UserLastname&gt;.    
				
				Ticket Queue            :  &lt;OTRS_CUSTOMER_QUEUE&gt;.    
				
				Ticket Priority            :  &lt;OTRS_TICKET_Priority&gt;.    
				
				Ticket SLA                 :  &lt;OTRS_TICKET_SLA&gt;.      
				
				Bitte um Bearbeitung:
				
				&lt;OTRS_CONFIG_HttpType&gt;://&lt;OTRS_CONFIG_FQDN&gt;/&lt;OTRS_CONFIG_ScriptAlias&gt;index.pl?Action=AgentZoom;TicketID=&lt;OTRS_TICKET_TicketID&gt;      
				
				
				wat betreft
				OTRS Admin&quot;;
			
			my $QueryNotificationsAlter_de = $Self-&gt;{DBObject}-&gt;Do(
			SQL =&gt; &quot;INSERT INTO notifications
			(notification_type, notification_charset, notification_language, subject, text, content_type, create_by, create_time, change_by, change_time)
			VALUES (?, ?, ?, ?, ?, 'text/plain', 1, ?, 1, ?)&quot;,
			Bind =&gt; [\$Type, \$Charset, \$Lang_de, \$Sub_de, \$Txt_de, \$CreateTime, \$CreateTime,],
			);
				
			if (!$QueryNotificationsAlter_de) {
				
				$Self-&gt;{LogObject}-&gt;Log(
				    Priority =&gt; 'error',
				    Message  =&gt; &quot;Could not insert value for Notifications for 'en' on $CodeModule.pm.&quot;
				);
				
			}
			
			
			my $Lang_nl = &quot;nl&quot;;
			my $Sub_nl = &quot;Ticket Escalatie Before &lt;OTRS_CUSTOMER_EMAIL[30]&gt;! (&lt;OTRS_CUSTOMER_SUBJECT[24]&gt;)&quot;;
			my $Txt_nl = &quot;Beste &lt;OTRS_UserFirstname&gt; &lt;OTRS_UserLastname&gt;,
				
				Het ticket [&lt;OTRS_TICKET_TicketNumber&gt;] is geëscaleerd (has breached in english): &lt;OTRS_CUSTOMER_EMAIL[30]&gt;.
				
				
				Ticket Owner             :  &lt;OTRS_OWNER_UserFirstname&gt; &lt;OTRS_OWNER_UserLastname&gt;.    
				
				Ticket Queue            :  &lt;OTRS_CUSTOMER_QUEUE&gt;.    
				
				Ticket Priority            :  &lt;OTRS_TICKET_Priority&gt;.    
				
				Ticket SLA                 :  &lt;OTRS_TICKET_SLA&gt;. 
				
				
				(eerste 30 regels zijn weergegeven)
				
				&lt;OTRS_CONFIG_HttpType&gt;://&lt;OTRS_CONFIG_FQDN&gt;/&lt;OTRS_CONFIG_ScriptAlias&gt;index.pl?Action=AgentZoom;TicketID=&lt;OTRS_TICKET_TicketID&gt;      
				
				
				wat betreft 
				OTRS Admin&quot;;
			
			my $QueryNotificationsAlter_nl = $Self-&gt;{DBObject}-&gt;Do(
			SQL =&gt; &quot;INSERT INTO notifications
			(notification_type, notification_charset, notification_language, subject, text, content_type, create_by, create_time, change_by, change_time)
			VALUES (?, ?, ?, ?, ?, 'text/plain', 1, ?, 1, ?)&quot;,
			Bind =&gt; [\$Type, \$Charset, \$Lang_nl, \$Sub_nl, \$Txt_nl, \$CreateTime, \$CreateTime,],
			);
				
			if (!$QueryNotificationsAlter_nl) {
				
				$Self-&gt;{LogObject}-&gt;Log(
				    Priority =&gt; 'error',
				    Message  =&gt; &quot;Could not insert value for Notifications for 'en' on $CodeModule.pm.&quot;
				);
				
			}
			
			
			
		}
		
		# error handling
		else {
				$Self-&gt;{LogObject}-&gt;Log(
				Priority =&gt; 'error',
				Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
				);
		}
	}	

    </CodeInstall>
    <CodeUpgrade Type="post">

        # define function name
        my $FunctionName = 'CodeUpgrade';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

		if ($CodeObject) {

                # start methode
			if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
				$Self-&gt;{LogObject}-&gt;Log(
					Priority =&gt; 'error',
					Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
				);
			}
		}

		# error handling
		else {
			$Self-&gt;{LogObject}-&gt;Log(
			        Priority =&gt; 'error',
			        Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
			);
		}
        }

    </CodeUpgrade>
    <CodeUninstall Type="pre">

        # define function name
        my $FunctionName = 'CodeUninstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {
		
            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
		
		if ($CodeObject) {
			
                # start methode
			my $QueryCheckNotifications1 = 'SELECT id FROM notifications WHERE notification_type LIKE &quot;Agent::EscalationMatrix&quot;';
			my $QueryDel1 = 'DELETE FROM notifications WHERE notification_type LIKE &quot;Agent::EscalationMatrix&quot;';
			$Self-&gt;{DBObject}-&gt;Prepare( SQL =&gt; $QueryCheckNotifications1);
			my @NotificationsField1 = $Self-&gt;{DBObject}-&gt;FetchrowArray();
			if($NotificationsField1[0]) {
				
				my $QueryDelete1 = $Self-&gt;{DBObject}-&gt;Do(
					SQL =&gt; $QueryDel1,
				);
			}
			
			if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
				        $Self-&gt;{LogObject}-&gt;Log(
				            Priority =&gt; 'error',
				            Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
				        );
			}
			
		}
		
		# error handling
		else {
			$Self-&gt;{LogObject}-&gt;Log(
				Priority =&gt; 'error',
				Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
			);
		}
        }

    </CodeUninstall>
    <CodeReinstall Type="post">

        # define function name
        my $FunctionName = 'CodeReinstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # load the module
        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );

		if ($CodeObject) {
		    
		        # start methode
			if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
				$Self-&gt;{LogObject}-&gt;Log(
					Priority =&gt; 'error',
					Message  =&gt; &quot;Could not call method $FunctionName() on $CodeModule.pm.&quot;
				);
			}
		}

		# error handling
		else {
			$Self-&gt;{LogObject}-&gt;Log(
			        Priority =&gt; 'error',
				Message  =&gt; &quot;Could not call method new() on $CodeModule.pm.&quot;
			);
		}
        }

    </CodeReinstall>
    <BuildDate>2013-02-28 14:11:07</BuildDate>
    <BuildHost>1dns8r1.egi.ericsson.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/Escalation.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPENWUz4kSWQ6IEVzY2FsYXRpb24ueG1sLHYgMS4wIDIwMTMvMDIvMDQgMTQ6Mzg6NTcgZW5oaSBFeHAgJDwvQ1ZTPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iRnJvbnRlbmQ6Ok1vZHVsZSMjI0FkbWluRVNDTCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlRpY2tldDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkZyb250ZW5kOjpBZG1pbjo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEZyb250ZW5kTW9kdWxlUmVnPgogICAgICAgICAgICAgICAgPEdyb3VwPmFkbWluPC9Hcm91cD4KICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvbj5BZG1pbjwvRGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8VGl0bGU+RXNjYWxhdGlvbiBNYXRyaXg8L1RpdGxlPgogICAgICAgICAgICAgICAgPE5hdkJhck5hbWU+QWRtaW48L05hdkJhck5hbWU+CiAgICAgICAgICAgICAgICA8TmF2QmFyTW9kdWxlPgogICAgICAgICAgICAgICAgICAgIDxNb2R1bGU+S2VybmVsOjpPdXRwdXQ6OkhUTUw6Ok5hdkJhck1vZHVsZUFkbWluPC9Nb2R1bGU+CiAgICAgICAgICAgICAgICAgICAgPE5hbWUgVHJhbnNsYXRhYmxlPSIxIj5Fc2NhbGF0aW9uIE1hdHJpeDwvTmFtZT4KICAgICAgICAgICAgICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5DcmVhdGUgYW5kIG1hbmFnZSBFc2NhbGF0aW9uIE1hdHJpeC48L0Rlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgICAgIDxCbG9jaz5UaWNrZXQ8L0Jsb2NrPgogICAgICAgICAgICAgICAgICAgIDxQcmlvPjExMDA8L1ByaW8+CiAgICAgICAgICAgICAgICA8L05hdkJhck1vZHVsZT4KICAgICAgICAgICAgPC9Gcm9udGVuZE1vZHVsZVJlZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+Cjwvb3Ryc19jb25maWc+</File>
        <File Location="Kernel/Modules/AdminESCL.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Escalation.pm" Permission="664" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminESCL.dtl" Permission="644" Encode="Base64"></File>
        <File Location="bin/otrs.Escalation.pl" Permission="755" Encode="Base64"></File>
        <File Location="var/packagesetup/MultilevelEscalation.pm" Permission="644" Encode="Base64">IyAtLQojIE11bHRpbGV2ZWxFc2NhbGF0aW9uLnBtIC0gY29kZSB0byBleGNlY3V0ZSBkdXJpbmcgcGFja2FnZSBpbnN0YWxsYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMSBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0gCiMgJElkOiBNdWx0aWxldmVsRXNjYWxhdGlvbi5wbSx2IDEuMiAyMDEzLzAyLzA0IDE0OjM4OjU3IGVuIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIHZhcjo6cGFja2FnZXNldHVwOjpNdWx0aWxldmVsRXNjYWxhdGlvbjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4yICQpIFsxXTsKCj1oZWFkMSBOQU1FCgpNdWx0aWxldmVsRXNjYWxhdGlvbi5wbSAtIGNvZGUgdG8gZXhjZWN1dGUgZHVyaW5nIHBhY2thZ2UgaW5zdGFsbGF0aW9uCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBmdW5jdGlvbnMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIHZhcjo6cGFja2FnZXNldHVwOjpNdWx0aWxldmVsRXNjYWxhdGlvbjsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ICAgID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgIAogICAgbXkgJERCT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkRCLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICAgICAgTG9nT2JqZWN0ICAgID0+ICRMb2dPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKICAgIAogICAgbXkgJENvZGVPYmplY3QgPSB2YXI6OnBhY2thZ2VzZXR1cDo6TXVsdGlsZXZlbEVzY2FsYXRpb24tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICAgICAgREJPYmplY3QgICAgID0+ICREQk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IEVuY29kZU9iamVjdCBNYWluT2JqZWN0IERCT2JqZWN0KQogICAgICAgICkKICAgIHsKICAgICAgICAkU2VsZi0+eyRPYmplY3R9ID0gJFBhcmFteyRPYmplY3R9IHx8IGRpZSAiR290IG5vICRPYmplY3QhIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIENvZGVJbnN0YWxsKCkKCnJ1biB0aGUgY29kZSBpbnN0YWxsIHBhcnQKCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPkNvZGVJbnN0YWxsKCk7Cgo9Y3V0CgpzdWIgQ29kZUluc3RhbGwgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gMTsKfQoKPWl0ZW0gQ29kZVJlaW5zdGFsbCgpCgpydW4gdGhlIGNvZGUgcmVpbnN0YWxsIHBhcnQKCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPkNvZGVSZWluc3RhbGwoKTsKCj1jdXQKCnN1YiBDb2RlUmVpbnN0YWxsIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIENvZGVVcGdyYWRlKCkKCnJ1biB0aGUgY29kZSB1cGdyYWRlIHBhcnQKCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPkNvZGVVcGdyYWRlKCk7Cgo9Y3V0CgpzdWIgQ29kZVVwZ3JhZGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gMTsKfQoKPWl0ZW0gQ29kZVVuaW5zdGFsbCgpCgpydW4gdGhlIGNvZGUgdW5pbnN0YWxsIHBhcnQKCiAgICBteSAkUmVzdWx0ID0gJENvZGVPYmplY3QtPkNvZGVVbmluc3RhbGwoKTsKCj1jdXQKCnN1YiBDb2RlVW5pbnN0YWxsIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIDE7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIFNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMi4wLnR4dC4KCj1jdXQKCj1oZWFkMSBWRVJTSU9OCiAKJFJldmlzaW9uOiAxLjIgJCAkRGF0ZTogMjAxMy8wMi8wNCAxNDozODo1NyAkCgo9Y3V0Cg==</File>
    </Filelist>
    <DatabaseInstall Type="post">
        <TableCreate Type="post" Name="escalation">
            <Column Name="sla_id" Required="true" Type="INTEGER"></Column>
            <Column Name="notify_type" Required="true" Size="3" Type="VARCHAR"></Column>
            <Column Name="level" Required="true" Type="INTEGER"></Column>
            <Column Name="notify_to" Size="10" Type="VARCHAR"></Column>
            <Column Name="notify_perc" Type="INTEGER"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <ForeignKey ForeignTable="sla">
                <Reference Foreign="id" Local="sla_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUninstall Type="pre">
        <TableDrop Type="pre" Name="escalation">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>